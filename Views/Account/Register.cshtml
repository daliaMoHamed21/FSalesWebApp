@model SalesWebApp.Models.RegisterViewModel
@{
    ViewBag.Title = "Register";
}

<h2 id="title" style="color: deepskyblue;">@ViewBag.Title</h2>
<h3>@ViewBag.Message</h3>

@using (Html.BeginForm("Register", "Account", FormMethod.Post, new { id = "registerForm", @class = "needs-validation", novalidate = "true" }))
{
    @Html.AntiForgeryToken()

    <div class="form-group">
        @Html.LabelFor(m => m.Username)
        @Html.TextBoxFor(m => m.Username, new { @class = "form-control", required = "required" })
        @Html.ValidationMessageFor(m => m.Username, "", new { @class = "text-danger" })
    </div>

    <div class="form-group position-relative">
        @Html.LabelFor(m => m.Password)
        <div class="input-group">
            @Html.PasswordFor(m => m.Password, new { @class = "form-control", id = "password-input", required = "required" })
            <span class="input-group-text toggle-password" style="cursor: pointer;">
                <i class="fa fa-eye-slash" aria-hidden="true"></i>
            </span>
        </div>
        @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
    </div>

    <div class="form-group position-relative">
        @Html.LabelFor(m => m.ConfirmPassword)
        <div class="input-group">
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", id = "confirm-password-input", required = "required" })
            <span class="input-group-text toggle-confirm-password" style="cursor: pointer;">
                <i class="fa fa-eye-slash" aria-hidden="true"></i>
            </span>
        </div>
        @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
    </div>
    <br />

    <button type="submit" class="btn btn-primary" style="width: 100%; max-width: 200px; padding: 5px;">Register</button>
    <p class="mt-3 text-left">Already have an account? <a href="@Url.Action("Login", "Account")">Login here</a></p>
}

@if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
{
    <div class="alert alert-danger mt-3">@ViewBag.ErrorMessage</div>
}

@section scripts {
    <script>
        $(document).ready(function () {
            // Toggle password visibility
            $('.toggle-password').click(function () {
                var passwordField = $('#password-input');
                var type = passwordField.attr('type') === 'password' ? 'text' : 'password';
                passwordField.attr('type', type);
                $(this).find('i').toggleClass('fa-eye-slash fa-eye');
            });

            // Toggle confirm password visibility
            $('.toggle-confirm-password').click(function () {
                var confirmPasswordField = $('#confirm-password-input');
                var type = confirmPasswordField.attr('type') === 'password' ? 'text' : 'password';
                confirmPasswordField.attr('type', type);
                $(this).find('i').toggleClass('fa-eye-slash fa-eye');
            });

            // Client-side form validation
            $('#registerForm').validate({
                rules: {
                    Username: {
                        required: true
                    },
                    Password: {
                        required: true,
                        minlength: 8,
                        pattern: /^(?=.*[a-zA-Z])(?=.*\d)(?=.*[^a-zA-Z\d]).+$/
                    },
                    ConfirmPassword: {
                        required: true,
                        equalTo: "#password-input"
                    }
                },
                messages: {
                    Username: {
                        required: "Username is required."
                    },
                    Password: {
                        required: "Password is required.",
                        minlength: "Password must be at least 8 characters long.",
                        pattern: "Password must contain numbers, letters, and special characters."
                    },
                    ConfirmPassword: {
                        required: "Confirm Password is required.",
                        equalTo: "Passwords do not match."
                    }
                },
                errorElement: 'div',
                errorPlacement: function (error, element) {
                    error.addClass('text-danger');
                    error.insertAfter(element); 
                }
            });
        });
    </script>
}
