@model SalesWebApp.Models.LoginViewModel
@{
    ViewBag.Title = "Login";
}

<h2 id="title" style="color: deepskyblue">@ViewBag.Title</h2>
<h3>@ViewBag.Message</h3>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            @using (Html.BeginForm("Login", "Account", FormMethod.Post, new { id = "loginForm" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-group">
                    @Html.LabelFor(m => m.Username)
                    @Html.TextBoxFor(m => m.Username, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Username, "", new { @class = "text-danger" })
                </div>

                <div class="form-group position-relative">
                    @Html.LabelFor(m => m.Password)
                    <div class="input-group">
                        @Html.PasswordFor(m => m.Password, new { @class = "form-control", id = "password-input" })
                        <span class="input-group-text toggle-password" style="cursor: pointer;">
                            <i class="fa fa-eye-slash" aria-hidden="true"></i>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                </div>
                <br />

                <div class="form-group text-center text-lg-start">
                    
                    <button type="submit" class="btn btn-primary" style="width: 50%; padding: 8px;">Login</button>
                </div>
            }

            @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
            {
                <div class="alert alert-danger mt-3 text-center">@ViewBag.ErrorMessage</div>
            }
        </div>
    </div>
</div>

@section scripts {
    <script>
        $(document).ready(function () {
            // Toggle password visibility
            $('.toggle-password').click(function () {
                var passwordField = $('#password-input');
                var type = passwordField.attr('type') === 'password' ? 'text' : 'password';
                passwordField.attr('type', type);
                $(this).find('i').toggleClass('fa-eye-slash fa-eye');
            });

            // Client-side form validation
            $('#loginForm').validate({
                rules: {
                    Username: {
                        required: true
                    },
                    Password: {
                        required: true
                    }
                },
                messages: {
                    Username: {
                        required: "Username is required."
                    },
                    Password: {
                        required: "Password is required."
                    }
                },
                errorElement: 'div',
                errorPlacement: function (error, element) {
                    error.addClass('text-danger');
                    error.insertAfter(element);
                }
            });
        });
    </script>
}
